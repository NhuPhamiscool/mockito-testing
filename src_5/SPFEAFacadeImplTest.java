/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package au.edu.sydney.brawndo.erp.spfea;

import au.edu.sydney.brawndo.erp.todo.TaskImpl;
import au.edu.sydney.brawndo.erp.todo.ToDoList;
import au.edu.sydney.brawndo.erp.todo.ToDoListImpl;
import au.edu.sydney.brawndo.erp.todo.Task;
// import org.junit.Test;

import java.util.List;
import java.util.ArrayList;
// import static org.junit.Assert.*;
import java.time.LocalDateTime;
// import org.junit.jupiter.api.BeforeEach;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
// import static org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Test;

public class SPFEAFacadeImplTest {
    
    @Test 
    public void addNewTaskNullProviderTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();
        
        test.setToDoProvider(null);

        Exception e = assertThrows(
            IllegalStateException.class,
            () -> { test.addNewTask(LocalDateTime.now(), "cleanup", "HOME OFFICE");
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addNewTaskNullDateTimeTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenThrow(new IllegalArgumentException());

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(null, "cleanup", "HOME OFFICE");
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addNewTaskInvalidDateTimeTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenThrow(new IllegalArgumentException());

        LocalDateTime invalid = LocalDateTime.now().minusDays(4);

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(invalid, "cleanup", "HOME OFFICE");
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addNewTaskNullDescriptionTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenThrow(new IllegalArgumentException());

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(LocalDateTime.now(), null, "HOME OFFICE");
        });
        assertNotNull(e);

        // empty description
        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(LocalDateTime.now(), "", "HOME OFFICE");
        });
        assertNotNull(e2);
        
    }

    @Test 
    public void addNewTaskInvalidLocationTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenThrow(new IllegalArgumentException());

        // home not in the list
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(LocalDateTime.now(), "cleanup", "home");
        });
        assertNotNull(e);

        // in lower case still invalid
        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(LocalDateTime.now(), "cleanup", "home office");
        });
        assertNotNull(e2);

        // empty location
        Exception e3 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(LocalDateTime.now(), "cleanup", "");
        });
        assertNotNull(e3);

        // null location
        Exception e4 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addNewTask(LocalDateTime.now(), "cleanup", null);
        });
        assertNotNull(e4);

    }


    @Test
    public void addNewTaskSuccessfullyTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenReturn(new TaskImpl(12, LocalDateTime.now(), "HOME OFFICE", "cleanup"));

        assertNotNull(test.addNewTask(LocalDateTime.now(), "cleanup", "HOME OFFICE"));

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenReturn(new TaskImpl(12, LocalDateTime.now(), "CUSTOMER SITE", "cleanup"));

        assertNotNull(test.addNewTask(LocalDateTime.now(), "cleanup", "CUSTOMER SITE"));
        
        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenReturn(new TaskImpl(12, LocalDateTime.now(), "MOBILE", "cleanup"));
        
        assertNotNull(test.addNewTask(LocalDateTime.now(), "cleanup", "MOBILE"));
        
    }

    @Test 
    public void completeTaskNullProviderTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();
        
        test.setToDoProvider(null);

        Exception e = assertThrows(
            IllegalStateException.class,
            () -> { test.completeTask(12);
        });
        assertNotNull(e); 
        
    }

    @Test 
    public void completeTaskNoMatchingTaskTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.findOne(anyInt())).thenThrow(new IllegalArgumentException());

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.completeTask(12);
        });

        assertNotNull(e); 
        
    }

    @Test 
    public void completeTaskAlreadyCompleteTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.findOne(anyInt())).thenThrow(new IllegalStateException());
        
        Exception e = assertThrows(
            IllegalStateException.class,
            () -> { test.completeTask(12);
        });

        assertNotNull(e); 
        
    }

    @Test 
    public void completeTaskSuccessfullyTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();
        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        // when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        // )).thenReturn(new TaskImpl(12, LocalDateTime.now(), "HOME OFFICE", "cleanup"));

        // Task testTask = test.addNewTask(LocalDateTime.now(), "cleanup", "HOME OFFICE");
       
       when(md.findOne(anyInt())).thenReturn(new TaskImpl(12, LocalDateTime.now(), "HOME OFFICE", "cleanup"));
       
       
        test.completeTask(12);
        // Task testTask = test.addNewTask(LocalDateTime.now(), "cleanup", "HOME OFFICE");
        // test.completeTask(testTask.getID());

        assertEquals(true, md.findOne(12).isCompleted()); 
        
    }

    @Test 
    public void getAllTasksNullProviderTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        test.setToDoProvider(null);

        Exception e = assertThrows(
            IllegalStateException.class,
            () -> { test.getAllTasks();
        });
        assertNotNull(e); 
        
    }


    @Test 
    public void getAllTasksEmptyListTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        List<Task> testList = new ArrayList<>();

        when(md.findAll()).thenReturn(testList);
        
        assertEquals(0, test.getAllTasks().size());
        
    }

    @Test 
    public void getAllTasksModifiedListTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        ToDoListImpl md = mock(ToDoListImpl.class);
        test.setToDoProvider(md);

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenReturn(new TaskImpl(12, LocalDateTime.now(), "HOME OFFICE", "cleanup"));

        Task testTask = test.addNewTask(LocalDateTime.now(), "cleanup", "HOME OFFICE");

        when(md.add(anyInt(), any(LocalDateTime.class), anyString(), anyString()
        )).thenReturn(new TaskImpl(23, LocalDateTime.now(), "HOME OFFICE", "cleanup"));

        Task testTask2 = test.addNewTask(LocalDateTime.now(), "cleanup", "HOME OFFICE");


        List<Task> testList = new ArrayList<>();
        testList.add(testTask);
        testList.add(testTask2);

        when(md.findAll()).thenReturn(testList);

        // modified the list obtained from getAllTasks
        // we expect that the original test.getAllTask will
        // not be equal to returnedList
        List<Task> returnedList = test.getAllTasks();
        returnedList.remove(0);

        // still size of 2
        assertEquals(2, test.getAllTasks().size());

        // we modified the task inside the list obtained from
        // getAllTasks. We expect that the the modification will be
        // seen in the original list as well
        List<Task> returnedList2 = test.getAllTasks();
        returnedList2.get(0).setDescription("doing home work");
        // testTask.setDescription("doing home work");

        // cleanup is the old description
        assertEquals("doing home work", test.getAllTasks().get(0).getDescription());
    }


    @Test 
    public void addCustomerInvalidLastNameTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", null, "+(9)98265", "o@mil.com");
        });
        assertNotNull(e);

        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "", "+(9)98265", "o@mil.com");
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addCustomerInvalidFirstNameTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer(null, "pham", "+(9)98265", "o@mil.com");
        });
        assertNotNull(e);

        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("", "pham", "+(9)98265", "o@mil.com");
        });
        assertNotNull(e2);
        
    }

    @Test 
    public void addCustomerInvalidFirstAndLastNameTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer(null, null, "+(9)98265", "o@mil.com");
        });
        assertNotNull(e);

        
        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("", "", "+(9)98265", "o@mil.com");
        });
        assertNotNull(e2);
        
    }

    @Test 
    public void addCustomerDuplicateNameTest() {
        SPFEAFacade test = new SPFEAFacadeImpl();

        test.addCustomer("olivia", "pham", null, "o@mil.com");

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "pham", "+(9)98265", "o@mil.com");
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addCustomerPhoneNullTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        // expected to be accepted
        assertNotNull(test.addCustomer("olivia", "pham", null, "o@mil.com"));
        
    }

    @Test 
    public void addCustomerPhoneEmptyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        // phone may not be empty
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "pham", "", "o@mil.com");
        });

        assertNotNull(e);
        
    }


    @Test 
    public void addCustomerPhoneOnlyNumCharacterTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "pham", "32phonenumber", "o@mil.com");
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addCustomerValidPhoneTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        // no error, expect to return the id of the new customer
        assertNotNull(test.addCustomer("olivia", "pham", "+(9)98265", "o@mil.com"));
        assertNotNull(test.addCustomer("mic", "pham", "+()", "o@mil.com"));
        assertNotNull(test.addCustomer("candy", "pham", "12", "o@mil.com"));
        
    }

    @Test 
    public void addCustomerEmailNullTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        // no error, expect to return the id of the new customer
        assertNotNull(test.addCustomer("olivia", "pham", "+(9)98265", null));
        
    }

    @Test 
    public void addCustomerEmailEmptyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        // email may not be empty
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "pham", "+(9)98265", "");
        });

        assertNotNull(e);
        
    }

    @Test 
    public void addCustomerMissingAtSignTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "pham", "+(9)98265", "omil.com");
        });
        assertNotNull(e);    
    }

    @Test 
    public void addCustomerEmailAndPhoneNullTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.addCustomer("olivia", "pham", null, null);
        });
        assertNotNull(e);
        
    }

    @Test 
    public void addCustomerSuccessfullyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        // int id = test.addCustomer("olivia", "pham", "+(9)98265", "o@mil.com");
        assertNotNull(test.addCustomer("olivia", "pham", "+(9)98265", "o@mil.com"));
        assertNotNull(test.addCustomer("my", "pham", "+(9)98265", "o@@@@mil.com"));    
    }

    @Test 
    public void getCustomerIdInvalidFirstNameTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.getCustomerID(null, "pham");
        });
        assertNotNull(e);

        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.getCustomerID("", "pham");
        });
        assertNotNull(e2);    
    }

    @Test 
    public void getCustomerIdInvalidLastNameTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.getCustomerID("olivia", null);
        });
        assertNotNull(e);   

        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.getCustomerID("olivia", "");
        });
        assertNotNull(e2);    
    }

    @Test 
    public void getCustomerIdNoMatchedCustomerTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");
        assertNull(test.getCustomerID("olivia", "pham"));
        // valid first and last name so expect to return an ID
        assertEquals(id, (int) test.getCustomerID("michelle", "koh"));

        
    }

    @Test 
    public void getAllCustomersNotNullTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");
        assertEquals(1, test.getAllCustomers().size());
    }


    @Test 
    public void getAllCustomersFormatTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");
        assertEquals("michelle, koh", test.getAllCustomers().get(0));
        
    }


    @Test 
    public void getAllCustomersEmptyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        assertEquals(0, test.getAllCustomers().size());
        assertNotNull(test.getAllCustomers());
    }


    @Test 
    public void getCustomersPhoneNoMatchingFoundTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.getCustomerPhone(id + 100);
        });
        assertNotNull(e);
    }

    @Test 
    public void getCustomersPhoneMatchingFoundTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");
        assertEquals("+(9)98265", test.getCustomerPhone(id));

        int id2 = test.addCustomer("oli", "kong", null, "o@mil.com");
        assertEquals(null, test.getCustomerPhone(id2));
    }

    @Test 
    public void getCustomersPhoneInvalidTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        // make sure the phone is not empty
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");
        assertNotEquals(0, test.getCustomerPhone(id).length());
        // assertThat(test.getCustomerPhone(id)).containsOnlyDigits();
    }

    @Test 
    public void setCustomersPhoneForNoMatchingIDCustomerTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", null);
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerPhone(id + 100, "+(89)876435");
        });

        assertNotNull(e);

    }


    @Test 
    public void setCustomersPhoneTestEmailNullAndSetPhoneNull() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", null);
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerPhone(id, null);
        });

        assertNotNull(e);

    }


    @Test 
    public void setCustomerPhoneInvalidNumCharacterTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerPhone(id, "phone32num");
        });
        assertNotNull(e);

        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerPhone(id, "+(32)987num");
        });
        assertNotNull(e2);

        // phone may not be empty
        Exception e3 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerPhone(id, "");
        });
        assertNotNull(e3);
        
    }

    

    @Test 
    public void setCustomerPhoneSuccessfullyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        test.setCustomerPhone(id, null);
        
        assertEquals(null, test.getCustomerPhone(id));
        
    }

    @Test 
    public void getCustomerEmailNoMatchingCustomerTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.getCustomerEmail(id + 100);
        });
        assertNotNull(e);
        
    }

    @Test 
    public void getCustomerEmailMatchingCustomerTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", null);

        assertEquals(null, test.getCustomerEmail(id));

        int id2 = test.addCustomer("mic", "kay", "+(9)98265", "o@mil.com");

        assertEquals("o@mil.com", test.getCustomerEmail(id2));
        assertNotEquals("omil.com", test.getCustomerEmail(id2));
        assertNotEquals(0, test.getCustomerEmail(id2).length());
        
    }

    

    @Test 
    public void setCustomersEmailForNoMatchingCustomerTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", null, "o@mil.com");
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerEmail(id + 100, "o@gmail.com");
        });

        assertNotNull(e);

    }

    @Test 
    public void setCustomersEmailTestPhoneNullAndSetEmailNull() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", null, "o@mil.com");
        
        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerEmail(id, null);
        });

        assertNotNull(e);

    }

    @Test 
    public void setCustomerEmailMissingAtSignTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerEmail(id, "micgmail.com");
        });
        assertNotNull(e);

        Exception e2 = assertThrows(
            IllegalArgumentException.class,
            () -> { test.setCustomerEmail(id, "");
        });
        assertNotNull(e2);
    }


    @Test 
    public void setCustomerEmailSuccessfullyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();
        
        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        test.setCustomerEmail(id, null);
        
        assertEquals(null, test.getCustomerEmail(id));
        
        test.setCustomerEmail(id, "mic@gmail.com");

        assertEquals("mic@gmail.com", test.getCustomerEmail(id));

        test.setCustomerEmail(id, "mic@@gmail.com");

        assertEquals("mic@@gmail.com", test.getCustomerEmail(id));
    }


    @Test 
    public void removeCustomerNoMatchingIdTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");

        Exception e = assertThrows(
            IllegalArgumentException.class,
            () -> { test.removeCustomer(id + 100);
        });
        assertNotNull(e);

    }

    @Test 
    public void removeCustomerSuccessfullyTest() {
        SPFEAFacadeImpl test = new SPFEAFacadeImpl();

        int id = test.addCustomer("michelle", "koh", "+(9)98265", "o@mil.com");
        assertEquals(id, (int) test.getCustomerID("michelle", "koh"));

        test.removeCustomer(id);
        assertNull(test.getCustomerID("michelle", "koh"));

    }

   


}
